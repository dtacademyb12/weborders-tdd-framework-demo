TDD - Test Driven Development (it is NOT DDT(Data-driven testing))  - a practice of writing tests before the code
TDD Test Automation Framework - a framework that uses TestNG or Junit to write the tests and wher you can write the functional tests before the functionality is ready

TDD Framework Building Steps:

1. Create a maven project
2. Add project specific dependencies and plugins (surefire)
3. Create a package structure
4. Add project specific .gitignore file
5. Add the utility classes
6. Add the TestBase class with necessary before and after methods and extend your test classes from it
7. Add the testng.xml file to configure a specific test run (regression.xml, smoke.xml)
8. Configure the surefire plugin to be able to run tests (specific xml files) through command line
9. Create a Driver class with singleton design pattern to prevent multiple initialization of webdriver object (browser)
10. Add the properties file with the global credentials and ConfigReader util class to read from the file




Design Patterns that the framework uses:

Singleton - a programming design pattern that enforces the creation of the object to a single instance. In our case,
we used it in our framework with Driver class where WebDriver object is initialized after a null check which ensures that there is never more than one WebDriver during the test execution.
To implement a singleton design pattern to an object (WebDriver):
- create a class with the object being declared as a private static variable
- make the class constructor private
- provide a factory getter method that initializes the object (WebDriver) through a null check and returns it.

For this design pattern to work properly, you MUST call Driver.getDriver() everytime when you need a WebDriver from then on


Page Object Model - design pattern used in UI test frameworks. Implementation: for each page of the web app, create a separate
page object class that holds the webelements and behaviors (methods).

Page Factory - a class/design pattern that is used along with Page Object Model that simplifies the process. The central of it is @FindBy annotations
and usinf PageFactory.initElemnets() method in a constructor

Lombok - a library that simplifies creation of POJO(Plain old java object)s. It provides annotations such as @Data
@Getter @Setter @AllArgsConstructor @NoArgsConstructor. We used it to create page classes fast, without needing to add getters all the time


Extent Reports - an advanced html report generator and logger that we used in our framework for visual html report.
It supports logging and attaching a screenshot on failure

Listener - it is a TestNG mechanism (an interface) through which we can obtain information about the status of the test.
TestNG offers various listener interfaces such as ITestReporter, ITestResult.
We used ITestResult listener interface for logging the test result in the @AfterMethod. ITestResult interface has getStatus() method
that contains the information about the status of the test (fail, pass, skip). Based on the status we mark the test accordingly in the @AfterMethod