TDD - Test Driven Development (it is NOT DDT(Data-driven testing))  - a practice of writing tests before the code
TDD Test Automation Framework - a framework that uses TestNG or Junit to write the tests and wher you can write the functional tests before the functionality is ready

TDD Framework Building Steps:

1. Create a maven project
2. Add project specific dependencies and plugins (surefire)
3. Create a package structure
4. Add project specific .gitignore file
5. Add the utility classes
6. Add the TestBase class with necessary before and after methods and extend your test classes from it
7. Add the testng.xml file to configure a specific test run (regression.xml, smoke.xml)
8. Configure the surefire plugin to be able to run tests (specific xml files) through command line
9. Create a Driver class with singleton design pattern to prevent multiple initialization of webdriver object (browser)
10. Add the properties file with the global credentials and ConfigReader util class to read from the file
10a.Add Page classes and create test cases in Page Object Model design pattern
11. Add Extent reports and configure it in TestBase class to generate html reports and logs
12. Add headless browser option in Driver class so that we can run our tests in headless mode in CI/CD servers
13. Add option to pass the browser from command line so that we can run cross-browser tests to check browser compatibility
14. Add an option to run tests in parallel by configuring Driver class for parallel tests and create xml files that can run parallel tests


Design Patterns that the framework uses:

Singleton - a programming design pattern that enforces the creation of the object to a single instance. In our case,
we used it in our framework with Driver class where WebDriver object is initialized after a null check which ensures that there is never more than one WebDriver during the test execution.
To implement a singleton design pattern to an object (WebDriver):
- create a class with the object being declared as a private static variable
- make the class constructor private
- provide a factory getter method that initializes the object (WebDriver) through a null check and returns it.

For this design pattern to work properly, you MUST call Driver.getDriver() everytime when you need a WebDriver from then on

Page Object Model - design pattern used in UI test frameworks. Implementation: for each page of the web app, create a separate
page object class that holds the webelements and behaviors (methods).

Page Factory - a class/design pattern that is used along with Page Object Model that simplifies the process. The central of it is @FindBy annotations
and usinf PageFactory.initElemnets() method in a constructor.

Lombok - a library that simplifies creation of POJO(Plain old java object)s. It provides annotations such as @Data
@Getter @Setter @AllArgsConstructor @NoArgsConstructor. We used it to create page classes fast, without needing to add getters all the time


Extent Reports - an advanced html report generator and logger that we used in our framework for visual html report.
It supports logging and attaching a screenshot on failure

Listener - it is a TestNG mechanism (an interface) through which we can obtain information about the status of the test.
TestNG offers various listener interfaces such as ITestReporter, ITestResult.
We used ITestResult listener interface for logging the test result in the @AfterMethod. ITestResult interface has getStatus() method
that contains the information about the status of the test (fail, pass, skip). Based on the status we mark the test accordingly in the @AfterMethod


TestNG TDD Framework components:

Java 17 - write framework code
Maven - manage dependencies and plugins, run tests via terminal, build the project, define project structure
TestNG - run the test cases, configure and organize the test suite runs via xml file and annotations.
Selenium WebDriver - work with/interact with UI of the application, to create UI test cases
Surefire Plugin (Maven) - configure how to run tests through CMD
Extent Reports - generate advanced html reports and logs
Lombok - generate the Java POJO boilerplate code such as getters,setters, constructors
Faker - generate mock test data
Mockaroo - service that generates realistic mock test data in a csv file
Commons IO - simplified read/write operations
IntelliJ - develop, test, fix errors in our framework, speed up the development process
Git/GitHub - version control our code, collaborate with others
.gitignore file - avoid merge conflicts by preventing the commit of unrelated/unnecessary files
properties file/ConfigReader - store the project related global variables
utility classes - store common re-usable methods that are used in the framework
test base/base/framework base class - store the common setup and teardown operations for all test classes
Singleton - design pattern that helps us to implement single webdriver instance during test execution
Page Object Model - design pattern that helps us to create maintainable code that stores webelements and their common actions
Page Factory - design pattern/class that is used along with Page Object Model to simplify finding webelements with @FindBy annotations


TESTS that the framework supports:

- integration/system
- functional
- smoke/sanity/health check
- regression
- UI, API, DB
- headless browser tests
- cross-browser tests
- parallel tests
- data-driven tests
- end-to-end tests

Basic Flow:

mvn test (Maven) ->  testng.xml file (TestNG) -> Test Classes -> Page Classes -> Test results generated by TestNG



Using Branch-based Workflow via Pull Requests within Test Automation Framework:

This approach encourages a culture of collaboration and improves the codebase by having
more than one pair of eyes scrutinize it. Below are the steps you would typically follow in this
workflow:

1. Framework Creation and Initial Push: The team lead creates a test automation
framework and pushes it to his/her remote GitHub repository.
2. Access Provision and Main Branch Protection(Optional): The team lead provides push access
to the other team members by adding them as collaborators. To prevent direct
commits, the team lead adds a protection rule to the main branch.
3. Framework Cloning: Each team member clones the test automation framework on
their local machines using the command git clone.
4. Code Update: Each team member pulls the latest code from the main branch to
ensure they're working on the most recent version of the project.
5. Branch Creation: Team members create new branches for implementing their tasks
and switch using git checkout -b branch-name.
6. Implementing Changes: Team members start adding changes and commit those
changes in their respective branches using git commit -m "message".
7. Pushing Changes: Once they've completed their work, team members push their
branches to the remote repository using git push --set-upstream origin branch-
name. This step can be done either through the command line or through IntelliJ
(which requires login to the GitHub account).
8. Pull Request Creation: Each team member then logs into their GitHub account,
accesses the team repository, and creates a pull request to propose the changes they
made in their branch be merged into main.
9. Code Review and Merge: The assigned reviewer(s) review the pull request and if
everything is fine, they merge the branch into main, close the pull request, and delete
the branch from the remote repository.
10. Local Branch Deletion: After their changes have been merged, team members delete
their old branches locally using git branch -d branch-name.
11. Pull the Main Branch: To get the latest updates that include their and othersâ€™ merged
changes, team members pull the main branch code. It is VERY important to do this step before creating any new branch from the main branch
12. Repetition of Steps: Steps 5-11 are repeated for every new task.




















